<?php

declare(strict_types=1);

namespace Tests\Web;

use App\Models\{{ model }};
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Inertia\Testing\Assert;
use Laravel\Passport\Passport;
use Tests\TestCase;
use function route;

class {{ models }}ControllerTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    public function testIndex(): void
    {
        /** @var User $user */
        $user = User::factory()->createOne();
        Passport::actingAs($user);

        {{ model }}::factory()->count(3)->create();

        $this
            ->get(route('{{ modelsSnake }}.index'))
            ->assertStatus(200)
            ->assertInertia(
                fn (Assert $page) => $page
                    ->component('{{ models }}')
            )
        ;
    }

    public function testCreate(): void
    {
        /** @var User $user */
        $user = User::factory()->createOne();
        Passport::actingAs($user);

        $this
            ->get(route('{{ modelsSnake }}.create'))
            ->assertStatus(200)
            ->assertInertia(
                fn (Assert $page) => $page
                    ->component('{{ model }}Edit')
            )
        ;
    }

    public function testStore(): void
    {
        /** @var User $user */
        $user = User::factory()->createOne();
        Passport::actingAs($user);

        $this
            ->postJson(route('{{ modelsSnake }}.store'), [
                // fixme: more information about entity for create
            ])
            ->assertStatus(303)
        ;

        // fixme: check if model exists and fullfilled correctly
    }

    public function testShow(): void
    {
        /** @var User $user */
        $user = User::factory()->createOne();
        Passport::actingAs($user);

        /** @var {{ model }} ${{ modelVariable }} */
        ${{ modelVariable }} = {{ model }}::factory()->createOne();

        $this
            ->get(route('{{ modelsSnake }}.show', ${{ modelVariable }}))
            ->assertStatus(200)
            ->assertInertia(
                fn (Assert $page) => $page
                    ->component('{{ model }}')
            )
        ;
    }

    public function testEdit(): void
    {
        /** @var User $user */
        $user = User::factory()->createOne();
        Passport::actingAs($user);

        /** @var {{ model }} ${{ modelVariable }} */
        ${{ modelVariable }} = {{ model }}::factory()->createOne();

        $this
            ->get(route('{{ modelsSnake }}.edit', ${{ modelVariable }}))
            ->assertStatus(200)
            ->assertInertia(
                fn (Assert $page) => $page
                    ->component('{{ model }}Edit')
            )
        ;
    }

    public function testUpdate(): void
    {
        /** @var User $user */
        $user = User::factory()->createOne();
        Passport::actingAs($user);

        /** @var {{ model }} ${{ modelVariable }} */
        ${{ modelVariable }} = {{ model }}::factory()->createOne();

        $this
            ->patch(route('{{ modelsSnake }}.update', ${{ modelVariable }}), [
                // fixme: need more data for patch
            ])
            ->assertStatus(303)
            ->assertRedirect(route('{{ modelsSnake }}.edit', ${{ modelVariable }}))
        ;

        // self::assertEquals($newFieldValue, ${{ modelVariable }}->fresh()->field);
    }

    public function testDestroy(): void
    {
        /** @var User $user */
        $user = User::factory()->createOne();
        Passport::actingAs($user);

        /** @var {{ model }} ${{ modelVariable }} */
        ${{ modelVariable }} = {{ model }}::factory()->createOne();

        $this
            ->delete(route('{{ modelsSnake }}.destroy', ${{ modelVariable }}))
            ->assertStatus(303)
            ->assertRedirect(route('{{ modelsSnake }}.index'))
        ;

        self::assertNull(${{ modelVariable }}->fresh());
        // or for soft deletes:
        // self::assertNotNull(${{ modelVariable }}->fresh());
    }
}
