<?php

declare(strict_types=1);

namespace Tests\Api;

use App\Models\{{ model }};
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Passport\Passport;
use Tests\TestCase;

class {{ models }}ControllerTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    public function testIndex(): void
    {
        /** @var User $user */
        $user = User::factory()->createOne();
        Passport::actingAs($user);

        {{ model }}::factory()->count(3)->create();

        $this
            ->getJson(route('api.{{ modelsSnake }}.index'))
            ->assertStatus(200)
            ->assertJsonStructure([
                'data' => [
                    '*' => [
                        'id',
                        'created_at',
                        'updated_at',
                        // fixme: need more data checks
                    ],
                ],
            ])
        ;
    }

    public function testStore(): void
    {
        /** @var User $user */
        $user = User::factory()->createOne();
        Passport::actingAs($user);

        $this
            ->postJson(route('api.{{ modelsSnake }}.store'), [
                // fixme: more information about entity for create
            ])
            ->assertStatus(201)
            ->assertJson([
                'data' => [
                    // fixme: need more data checks
                ],
            ])
        ;
    }

    public function testShow(): void
    {
        /** @var User $user */
        $user = User::factory()->createOne();
        Passport::actingAs($user);

        /** @var {{ model }} ${{ modelVariable }} */
        ${{ modelVariable }} = {{ model }}::factory()->createOne();

        $this
            ->getJson(route('api.{{ modelsSnake }}.show', ${{ modelVariable }}))
            ->assertStatus(200)
            ->assertJson([
                'data' => [
                    'id' => ${{ modelVariable }}->id,
                    // fixme: need more data checks
                ],
            ])
        ;
    }

    public function testUpdate(): void
    {
        /** @var User $user */
        $user = User::factory()->createOne();
        Passport::actingAs($user);

        /** @var {{ model }} ${{ modelVariable }} */
        ${{ modelVariable }} = {{ model }}::factory()->createOne();

        $this
            ->patchJson(route('api.{{ modelsSnake }}.update', ${{ modelVariable }}), [
                // fixme: need more data for patch
            ])
            ->assertStatus(200)
            ->assertJson([
                'data' => [
                    'id' => ${{ modelVariable }}->id,
                    // fixme: need more data for checks
                ],
            ])
        ;
    }

    public function testDestroy(): void
    {
        /** @var User $user */
        $user = User::factory()->createOne();
        Passport::actingAs($user);

        /** @var {{ model }} ${{ modelVariable }} */
        ${{ modelVariable }} = {{ model }}::factory()->createOne();

        $this
            ->deleteJson(route('api.{{ modelsSnake }}.destroy', ${{ modelVariable }}))
            ->assertStatus(200)
            ->assertJson(
                [
                    'data' => [
                        'id' => ${{ modelVariable }}->id,
                        // fixme: need more data for checks
                    ],
                ]
            )
        ;

        self::assertNull(${{ modelVariable }}->fresh());
        // or for soft deletes:
        // self::assertNotNull(${{ modelVariable }}->fresh());
    }
}
